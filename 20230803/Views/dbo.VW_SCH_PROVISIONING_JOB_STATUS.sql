SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[VW_SCH_PROVISIONING_JOB_STATUS]
AS
    SELECT job.ID AS JOB_ID, 
       task.NAME AS JOB_NAME,
       task.ASSIGNED_TO_USER_ID,
       task.ENABLED,
       job.LAST_EXECUTION_DATE, 
       dbo.fn_convert_ticks_to_datetime(ISNULL(qrtztrigger.NEXT_RUN_TIME, -1)) AS NEXT_EXECUTION_DATE,
       CASE WHEN HAS_FAILURES_1 = 1 OR HAS_FAILURES_2 = 1 OR HAS_FAILURES_3 = 1 OR HAS_FAILURES_4 = 1 OR HAS_FAILURES_5 = 1 OR HAS_FAILURES_6 = 1 OR HAS_FAILURES_7 = 1 OR HAS_FAILURES_8 = 1 OR HAS_FAILURES_9 = 1 OR HAS_FAILURES_10 =1 THEN 1 ELSE 0 END AS HAS_FAILURES,
       history.SUCCESS_PERCENT_1, 
       history.SUCCESS_PERCENT_2,  
       history.SUCCESS_PERCENT_3, 
       history.SUCCESS_PERCENT_4, 
       history.SUCCESS_PERCENT_5, 
       history.SUCCESS_PERCENT_6, 
       history.SUCCESS_PERCENT_7, 
       history.SUCCESS_PERCENT_8, 
       history.SUCCESS_PERCENT_9, 
       history.SUCCESS_PERCENT_10, 
       history.BATCH_ID_1,
       history.BATCH_ID_2,
       history.BATCH_ID_3,
       history.BATCH_ID_4,
       history.BATCH_ID_5,
       history.BATCH_ID_6,
       history.BATCH_ID_7,
       history.BATCH_ID_8,
       history.BATCH_ID_9,
       history.BATCH_ID_10,
       history.EXECUTION_DATE_1,
       history.EXECUTION_DATE_2,
       history.EXECUTION_DATE_3,
       history.EXECUTION_DATE_4,
       history.EXECUTION_DATE_5,
       history.EXECUTION_DATE_6,
       history.EXECUTION_DATE_7,
       history.EXECUTION_DATE_8,
       history.EXECUTION_DATE_9,
       history.EXECUTION_DATE_10,
       history.BATCH_STATUS_1,
       history.BATCH_STATUS_2,
       history.BATCH_STATUS_3,
       history.BATCH_STATUS_4,
       history.BATCH_STATUS_5,
       history.BATCH_STATUS_6,
       history.BATCH_STATUS_7,
       history.BATCH_STATUS_8,
       history.BATCH_STATUS_9,
       history.BATCH_STATUS_10,
       COALESCE(latestTaskHistory.RESULT, 'S') AS [JOB_STATUS],
       latestTaskHistory.MESSAGE AS [JOB_STATUS_MESSAGE]
    FROM TB_SCH_PROVISIONING_JOB job
    LEFT JOIN
    (    
        SELECT JOB_ID, 
               MAX(CASE WHEN [ROW] = 1 THEN [BATCH_ID] ELSE NULL END) AS [BATCH_ID_1],
               MAX(CASE WHEN [ROW] = 2 THEN [BATCH_ID] ELSE NULL END) AS [BATCH_ID_2],
               MAX(CASE WHEN [ROW] = 3 THEN [BATCH_ID] ELSE NULL END) AS [BATCH_ID_3],
               MAX(CASE WHEN [ROW] = 4 THEN [BATCH_ID] ELSE NULL END) AS [BATCH_ID_4],
               MAX(CASE WHEN [ROW] = 5 THEN [BATCH_ID] ELSE NULL END) AS [BATCH_ID_5],
               MAX(CASE WHEN [ROW] = 6 THEN [BATCH_ID] ELSE NULL END) AS [BATCH_ID_6],
               MAX(CASE WHEN [ROW] = 7 THEN [BATCH_ID] ELSE NULL END) AS [BATCH_ID_7],
               MAX(CASE WHEN [ROW] = 8 THEN [BATCH_ID] ELSE NULL END) AS [BATCH_ID_8],
               MAX(CASE WHEN [ROW] = 9 THEN [BATCH_ID] ELSE NULL END) AS [BATCH_ID_9],
               MAX(CASE WHEN [ROW] = 10 THEN [BATCH_ID] ELSE NULL END) AS [BATCH_ID_10],
               MAX(CASE WHEN [ROW] = 1 THEN [EXECUTION_DATE] ELSE NULL END) AS [EXECUTION_DATE_1],
               MAX(CASE WHEN [ROW] = 2 THEN [EXECUTION_DATE] ELSE NULL END) AS [EXECUTION_DATE_2],
               MAX(CASE WHEN [ROW] = 3 THEN [EXECUTION_DATE] ELSE NULL END) AS [EXECUTION_DATE_3],
               MAX(CASE WHEN [ROW] = 4 THEN [EXECUTION_DATE] ELSE NULL END) AS [EXECUTION_DATE_4],
               MAX(CASE WHEN [ROW] = 5 THEN [EXECUTION_DATE] ELSE NULL END) AS [EXECUTION_DATE_5],
               MAX(CASE WHEN [ROW] = 6 THEN [EXECUTION_DATE] ELSE NULL END) AS [EXECUTION_DATE_6],
               MAX(CASE WHEN [ROW] = 7 THEN [EXECUTION_DATE] ELSE NULL END) AS [EXECUTION_DATE_7],
               MAX(CASE WHEN [ROW] = 8 THEN [EXECUTION_DATE] ELSE NULL END) AS [EXECUTION_DATE_8],
               MAX(CASE WHEN [ROW] = 9 THEN [EXECUTION_DATE] ELSE NULL END) AS [EXECUTION_DATE_9],
               MAX(CASE WHEN [ROW] = 10 THEN [EXECUTION_DATE] ELSE NULL END) AS [EXECUTION_DATE_10],
               MAX(CASE WHEN [ROW] = 1 THEN [HAS_FAILURES] ELSE NULL END) AS [HAS_FAILURES_1],
               MAX(CASE WHEN [ROW] = 2 THEN [HAS_FAILURES] ELSE NULL END) AS [HAS_FAILURES_2],
               MAX(CASE WHEN [ROW] = 3 THEN [HAS_FAILURES] ELSE NULL END) AS [HAS_FAILURES_3],
               MAX(CASE WHEN [ROW] = 4 THEN [HAS_FAILURES] ELSE NULL END) AS [HAS_FAILURES_4],
               MAX(CASE WHEN [ROW] = 5 THEN [HAS_FAILURES] ELSE NULL END) AS [HAS_FAILURES_5],
               MAX(CASE WHEN [ROW] = 6 THEN [HAS_FAILURES] ELSE NULL END) AS [HAS_FAILURES_6],
               MAX(CASE WHEN [ROW] = 7 THEN [HAS_FAILURES] ELSE NULL END) AS [HAS_FAILURES_7],
               MAX(CASE WHEN [ROW] = 8 THEN [HAS_FAILURES] ELSE NULL END) AS [HAS_FAILURES_8],
               MAX(CASE WHEN [ROW] = 9 THEN [HAS_FAILURES] ELSE NULL END) AS [HAS_FAILURES_9],
               MAX(CASE WHEN [ROW] = 10 THEN [HAS_FAILURES] ELSE NULL END) AS [HAS_FAILURES_10],
               MAX(CASE WHEN [ROW] = 1 THEN [SUCCESS_PERCENT] ELSE NULL END) AS [SUCCESS_PERCENT_1],
               MAX(CASE WHEN [ROW] = 2 THEN [SUCCESS_PERCENT] ELSE NULL END) AS [SUCCESS_PERCENT_2],
               MAX(CASE WHEN [ROW] = 3 THEN [SUCCESS_PERCENT] ELSE NULL END) AS [SUCCESS_PERCENT_3],
               MAX(CASE WHEN [ROW] = 4 THEN [SUCCESS_PERCENT] ELSE NULL END) AS [SUCCESS_PERCENT_4],
               MAX(CASE WHEN [ROW] = 5 THEN [SUCCESS_PERCENT] ELSE NULL END) AS [SUCCESS_PERCENT_5],
               MAX(CASE WHEN [ROW] = 6 THEN [SUCCESS_PERCENT] ELSE NULL END) AS [SUCCESS_PERCENT_6],
               MAX(CASE WHEN [ROW] = 7 THEN [SUCCESS_PERCENT] ELSE NULL END) AS [SUCCESS_PERCENT_7],
               MAX(CASE WHEN [ROW] = 8 THEN [SUCCESS_PERCENT] ELSE NULL END) AS [SUCCESS_PERCENT_8],
               MAX(CASE WHEN [ROW] = 9 THEN [SUCCESS_PERCENT] ELSE NULL END) AS [SUCCESS_PERCENT_9],
               MAX(CASE WHEN [ROW] = 10 THEN [SUCCESS_PERCENT] ELSE NULL END) AS [SUCCESS_PERCENT_10],
               MAX(CASE WHEN [ROW] = 1 THEN [BATCH_STATUS] ELSE NULL END) AS [BATCH_STATUS_1],
               MAX(CASE WHEN [ROW] = 2 THEN [BATCH_STATUS] ELSE NULL END) AS [BATCH_STATUS_2],
               MAX(CASE WHEN [ROW] = 3 THEN [BATCH_STATUS] ELSE NULL END) AS [BATCH_STATUS_3],
               MAX(CASE WHEN [ROW] = 4 THEN [BATCH_STATUS] ELSE NULL END) AS [BATCH_STATUS_4],
               MAX(CASE WHEN [ROW] = 5 THEN [BATCH_STATUS] ELSE NULL END) AS [BATCH_STATUS_5],
               MAX(CASE WHEN [ROW] = 6 THEN [BATCH_STATUS] ELSE NULL END) AS [BATCH_STATUS_6],
               MAX(CASE WHEN [ROW] = 7 THEN [BATCH_STATUS] ELSE NULL END) AS [BATCH_STATUS_7],
               MAX(CASE WHEN [ROW] = 8 THEN [BATCH_STATUS] ELSE NULL END) AS [BATCH_STATUS_8],
               MAX(CASE WHEN [ROW] = 9 THEN [BATCH_STATUS] ELSE NULL END) AS [BATCH_STATUS_9],
               MAX(CASE WHEN [ROW] = 10 THEN [BATCH_STATUS] ELSE NULL END) AS [BATCH_STATUS_10]
        FROM 
        (
            SELECT ordered.* FROM
            (
                SELECT history.JOB_ID,
                       history.BATCH_ID,
                       history.EXECUTION_DATE,
                       ROW_NUMBER () OVER (
                         PARTITION BY JOB_ID
                         ORDER BY EXECUTION_DATE DESC
                       ) [ROW],
                       CASE WHEN batch.FAILED_REQUESTS > 0 THEN 1 ELSE 0 END AS HAS_FAILURES,
                       CASE WHEN batch.TOTAL_REQUESTS = 0 THEN 100 ELSE CAST(CAST(CAST(batch.SUCCESSFUL_REQUESTS AS DECIMAL) + CAST(batch.SKIPPED_REQUESTS AS DECIMAL) + CAST(batch.PENDING_REQUESTS AS DECIMAL) + CAST(batch.IN_PROGRESS_REQUESTS AS DECIMAL) AS DECIMAL) / CAST(batch.TOTAL_REQUESTS AS DECIMAL) * 100 AS DECIMAL(10,1)) END AS SUCCESS_PERCENT,
                       batch.STATUS AS BATCH_STATUS
                FROM  TB_SCH_PROVISIONING_JOB_HISTORY AS history
                JOIN TB_ADM_PROVISIONING_BATCH AS batch ON batch.ID = history.BATCH_ID
            ) AS ordered
            WHERE ordered.ROW <= 10

        ) AS recentTen

        GROUP by recentTen.JOB_ID

    ) AS history
    ON job.ID = history.JOB_ID
    JOIN TB_SCH_TASK AS task
    ON job.ID = task.TASK_ID
    LEFT JOIN (SELECT JOB_NAME, MIN(NEXT_FIRE_TIME) AS NEXT_RUN_TIME FROM TB_SCH_QRTZ_TRIGGERS GROUP BY JOB_NAME) qrtztrigger
    ON qrtztrigger.JOB_NAME = task.TASK_ID
    LEFT JOIN
    (
        SELECT orderedTaskHistory.* FROM
        (
            SELECT    taskHistory.TASK_ID,
                    taskHistory.RESULT,
                    taskHistory.MESSAGE,
                    ROW_NUMBER () OVER (
                        PARTITION BY TASK_ID
                        ORDER BY FIRETIME DESC
                    ) [ROW]
            FROM  TB_SCH_TASK_HISTORY AS taskHistory
        ) AS orderedTaskHistory
        WHERE orderedTaskHistory.[ROW] = 1
    ) AS latestTaskHistory
    ON latestTaskHistory.TASK_ID = job.ID
    WHERE task.DELETED = 0
GO
GRANT SELECT
	ON [dbo].[VW_SCH_PROVISIONING_JOB_STATUS]
	TO [portalapp_role]
GO
